% M1 TC4 - Introduction à l'analyse de données
% Sujet 1
% 
% GIMENEZ Florian
% HECKEL Thibault
%
% Janvier 2018

% URL
% https://fr.mathworks.com/help/images/ref/normxcorr2.html

% Suppression de toutes les variables en mémoires
clear all
% Fermeture de toutes les fenêtres
close all

% Sélection d'une certaine séquence d'images :
prefix = '6.3';
dir_name = strcat('sequences/', prefix, '*.tiff');

% Listing du répertoire dans lequel se trouve toutes nos images :
dir_list = dir(dir_name);

% Toutes les images d'une séquence d'images sont censées avoir les mêmes 
% dimensions ici.
% Pour récupérer la dimension de toutes ces images, il nous suffit alors de
% lire uniquement les dimension d'une seule image (ici la première) :
img_default = imread(['sequences/' dir_list(1).name]);

% img_h -> height (hauteur, nombre de lignes)
% img_w -> width (largeur, nombre de colonnes)
[img_h, img_w] = size(img_default);

% Nombre d'images listées :
nb_img = length(dir_list);

% Récupération dans une matrice à 3 dimensions de toutes les images 
% de notre séquence (sauf la première déjà lue).
% Cette matrice aura pour taille :
% [hauteur de l'image][largeur de l'image][nombre d'images-1]
% Initialisation :
img_list = zeros(img_h, img_w, nb_img-1);

% Lecture des images listées dans le répertoire :
for i = 1:nb_img-1
   img_list(:,:,i) = imread(['sequences/' dir_list(i+1).name]);
end

% 1)
% Mélange des Images 
% Pour ce faire : mélange des index des images
shuffle = randperm(nb_img-1);

% Permutation et recopies des images dans une nouvelle liste :
img_shuffle = ones(img_h, img_w, nb_img);
for i = 2:nb_img
    img_shuffle(:,:,i) = img_list(:,:, shuffle(i-1));
end

% On place la première image de notre séquence en première place dans notre
% "liste mélangée"
img_shuffle(:,:,1) = img_default;

% Pour chaque image on va tester toutes les voisinnes restantes
% non-classées.
% La dernière image n'en aura donc pas (d'où le nb_img-1).
for i=1:nb_img-1
   closest_id = i+1;
   NC2_max = 0;
   
   % On compare à chaque fois grâce à normxcorr2 la cross-correlation
   % normalisée entre l'image i fixe et une de ses voisinnes j.
   for j=i+1:nb_img
      NC2 = normxcorr2( img_shuffle(:,:,i), img_shuffle(:,:,j) );
      NC2_current_max = max(NC2(:));
      
      % On récupère ensuite le maximum dans cette matrice de
      % cross-correlation normalisée.
      % Plus le max est grand (1 = égalité), plus l'image j est proche 
      % de l'image i.
      if NC2_max < NC2_current_max
         NC2_max = NC2_current_max;
         closest_id = j;
      end
   end
   
   % Si le plus proche voisin de i, n'est plus i+1, alors on effectue une
   % permutation.
   if closest_id ~= i+1
       tmp = img_shuffle(:,:,i+1);
       img_shuffle(:,:,i+1) = img_shuffle(:,:, closest_id);
       img_shuffle(:,:, closest_id) = tmp;
   end
   
   % Puis on recommence notre tri d'image en partant de i+1
end


% Vérification des résultats :

% Création des tableaux de résultats :
true_r = zeros(nb_img-1, 1);
sorted_r = zeros(nb_img-1, 1);

% Création de la liste initiale, qui est elle dans l'ordre.
img_true_list = zeros(img_w, img_h, nb_img);
img_true_list(:,:,1) = img_default;
img_true_list(:,:,2:end) = img_list;

% Pour les deux séquences (initiale et triée après mélange) :
% Calcul de la matrice normale d
for i=1:nb_img-1
    NC2 = normxcorr2( img_true_list(:,:,i), img_true_list(:,:,i+1) );
    true_r(i) = max( NC2(:) );
    
    NC2 = normxcorr2( img_shuffle(:,:,i), img_shuffle(:,:,i+1) );
    sorted_r(i) = max( NC2(:) );
end

display("Difference entre les deux séquences d'images :")
norm( true_r - sorted_r )

% % Affiche les différences trouvées entre deux images (visuel)
%figure
%subplot(1,2,1);
%imshowpair( img_true_list(:,:,1), img_true_list(:,:,5), 'diff');
%subplot(1,2,2);
%imshowpair( img_shuffle(:,:,1), img_shuffle(:,:,5), 'diff' );

display('fin')